<?php
/**
 * Created by PhpStorm.
 * User: Vnimy
 * Date: 2016-12-29
 * Time: 14:56
 */

namespace Wx\Controller;


use Common\Controller\HomebaseController;
use Wx\Common\Wechat;

class LoginController extends HomebaseController
{
    protected $_model;

    protected $default_user_type = 20;

    protected $auto_register = true;

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_model = D('Users');
    }

    /*
     * 生成登陆二维码
     */
    function qr($url=true){
        if(sp_is_user_login()){
            $this->error('您已经登陆了！');
        }

        $wx = new Wechat();

        $timeout = $wx->getConfig('loginQrcodeExpired');
        list($err, $data) = $wx->createLoginQrcode($timeout);
        if($data){
            $qrcode = array(
                'id'    => $data['id'],
                'src'   => $data['url'],
                'sceneid'=> $data['scene_str'],
                'ticket'=> $data['ticket'],
                'expire'=> $data['expire_date'],
            );
            $this->ajaxReturn(array(
                'status'    => 1,
                'data'      => $qrcode,
            ));
        }else{
            $this->error('无法生成二维码，请与管理员联系！');
        }
    }

    function bind(){
        if(sp_is_user_login()){ //已经登录时直接跳到首页
            $redirect = session('login_http_referer') ? session('login_http_referer'):__ROOT__.'/';
            redirect($redirect);
        }else{
            if(sp_is_mobile() && is_weixin()){
                $data = session('wxbind_data');
                $this->assign($data);
                $this->display();
            }else if(!sp_is_mobile()){
//                $where = array(
//                    'sceneid'=> I('get.s'),
//                    'ticket'=> I('get.t'),
//                    'status'=> 1,
//                    '_string'   => time().' - createtime < 3600',
//                );
//                $qr = M('WxQrcode')->where($where)->find();
//                if($qr){
//                    $wx = new Wechat();
//                    $info = $wx->api->get_user_info($qr['openid']);
//                    $data = array(
//                        'openid'        => $qr['openid'],
//                        'nickname'      => (string)$info[1]->nickname,
//                        'sex'           => (int)$info[1]->sex,
//                        'avatar'        => (string)$info[1]->headimgurl,
//                    );
//                    $this->assign($data);
//                    $this->display();
//                }
            }
        }
    }

    function bind_post(){
        if(IS_POST){

            $post = I('post.');
            $openid = $post['openid'];
            $username = $post['username'];
            $password = $post['password'];

            if(empty($openid)){
                $this->error('非法操作！');
            }

            $count = $this->_model->where(array('openid'=>$openid))->count();
            if($count > 0){
                $this->error('这个微信号已经有绑定面料馆账号了！');
            }

            $user = $this->_model->where(array('user_login'=>$username))->find();
            if(sp_compare_password($password, $user['user_pass'])){
                if(empty($user['openid'])){
                    $result = $this->_model->where(array('id'=>$user['id']))->setField('openid',$openid);
                    if($result !== false){
                        $user = $this->_model->getUser($user['id']);
                        $redirect = login_session($user);
                        $this->success('绑定成功！',$redirect);
                    }else{
                        $this->error('绑定失败！');
                    }
                }else{
                    $this->error('这个账号已经绑定其他微信号了，请先解绑！');
                }
            }else{
                $this->error('账号密码错误！');
            }
        }
    }


    function dologin(){
        $qrcode_model = M('WxQrcode');
        $where['qr.id'] = I('get.id/d', 0);
        $where['qr.type'] = 1;
        $where['qr.status'] = 1;
        $qrcode = $qrcode_model
            ->alias('qr')
            ->field('qr.id,qr.expire_date,log.openid,log.create_date as log_date')
            ->join('__WX_QRCODE_LOG__ log ON log.qr_id=qr.id')
            ->where($where)
            ->find();
        if($qrcode['openid']){
            //将二维码设为失效
            $qrcode_model->where(array('id' => $qrcode['id']))->setField('status', 0);

            $user = $this->_model->getUserByOpenId($qrcode['openid']);

            if($user){
                if($user['user_status']){
                    $redirect = login_session($user);
                    $this->ajaxReturn(array(
                        'info'      => '登陆成功！',
                        'status'    => 1,
                        'url'       => $redirect,
                        'data'      => 1,
                    ));
                    //$this->success(array(1,'登陆成功！'),$redirect);
                }else{
                    $this->ajaxReturn(array(
                        'info'      => '用户已被禁用！',
                        'status'    => 0,
                        'data'      => 0,
                    ));
                    //$this->success(array(0,'用户已被禁用！'));
                }
            }else{
                $wx = new Wechat();
                $user_id = $wx->regByOpenId($qrcode['openid']);
                session('user.id',$user_id);
                $user = D('Users')->getUser($user_id);
                if($user){
                    $redirect = login_session($user);
                    $this->ajaxReturn(array(
                        'info'      => '登陆成功！',
                        'status'    => 1,
                        'url'       => $redirect,
                        'data'      => 1,
                    ));
                    //$this->success(array(1,'登陆成功！'),$redirect);
                }else{
                    //自动注册失败后去绑定账号
                    $params = array(
                        's'=>$where['sceneid'],
                        't'=>$where['ticket'],
                    );
                    $this->ajaxReturn(array(
                        'info'      => '未找到账号！',
                        'status'    => 1,
                        'url'       => leuu('bind',$params),
                        'data'      => 2,
                    ));
                    //$this->success(array(2,'未找到账号！'),leuu('bind',$params));
                }
            }
        }else{
            //未扫码
            $this->error('未扫码');
        }
    }

}