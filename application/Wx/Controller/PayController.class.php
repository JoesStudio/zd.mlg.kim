<?php
/**
 * Created by PhpStorm.
 * User: Vnimy
 * Date: 2017-01-05
 * Time: 11:02
 */

namespace Wx\Controller;


use Common\Controller\MemberbaseController;
use Wx\Common\Wechat;
use Wx\Model\TradeModel;
use Order\Model\OrderModel;

class PayController extends MemberbaseController
{
    protected $_model;
    protected $order_model;

    function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->_model = new TradeModel();
        $this->order_model = new OrderModel();

//        if (empty($this->user['openid'])) {
//            $this->error('您的账号还没有绑定微信');
//        }
    }

    function order($id)
    {

        $wx = new Wechat();
        $payment = M('Payment')->where("pay_code='WECHAT'")->find();
        if (empty($payment)) {
            $this->error = '找不到支付方式！';
            return false;
        }

        $orderinfo = D('Order/Order')->getOrder(array('order_id' => $id));


        if (empty($orderinfo)) {
            $this->error('传入数据错误！');
        }

        $result = M('OrderInfo')->save(array(
            'order_id' => $id,
            'pay_id' => $payment['pay_id'],
            'pay_name' => $payment['pay_name'],
        ));
        if ($result === false) {
            $this->error = '支付失败：服务器繁忙，请稍后重试！';
        }

        if ($orderinfo['order_type'] == 4) {
            if ($orderinfo['order_type'] != 4 && $orderinfo['user_id'] !== $this->userid) {
                $this->error('传入数据错误！');
            }
            if ($orderinfo['order_type'] == 4 && $orderinfo['user_id'] !== $this->user['member']['id']) {
                $this->error('传入数据错误！');
            }
        }

        switch ($orderinfo['order_type']) {
            case 1:
                $viewhref = leuu('Order/Index/view', array('id' => $id));
                break;
            case 2:
                $viewhref = leuu('Order/Group/view', array('oid' => $id));
                break;
            case 3:
            case 4:
                $viewhref = leuu('Order/SupplierCard/view', array('id' => $id));
                break;
            case 5:
                $viewhref = C("NEW_DOMAIN_URL") . "agency/info/" . $orderinfo['pay_note'];
                break;
            default:
                $viewhref = leuu('order/index/view', array('id' => $id));
        }

        if ($orderinfo['pay_status'] > 0) {
            if ($orderinfo['order_type'] == 5) {
                D("Api/Agency", "Service")->setApplyPayed($id);
            }

            $this->success('当前订单已经付款了！', $viewhref);
        }

        $trade_id = $this->build_trade($id, 'ORDER', $orderinfo['order_amount'], '面料馆-支付订单');

        if (!$trade_id) {
            $this->error('生成交易单失败！');
        }

        $trade = $this->_model->find($trade_id);

        $unifiedOrder = $this->get_unified_order($trade_id);

        if (!$unifiedOrder) {
            $this->error('生成预订单失败！');
        }

        if ($unifiedOrder['return_code'] == 'FAIL') {
            //exit($unifiedOrder['return_msg']);
            $this->error('生成预订单失败！');
        }

        if ($unifiedOrder['result_code'] == 'FAIL') {
            if ($unifiedOrder['err_code'] == 'ORDERPAID') {
                $orderQuery = $wx->api->wxPayOrderQuery($trade['out_trade_no']);
                $this->order_model->setPaid($id, strtotime($orderQuery['time_end']));

                $this->success('当前订单已经付款了！', $viewhref);
            } else {
                //exit($unifiedOrder['err_code'] . ': ' . $unifiedOrder['err_code_des']);
                $this->error($unifiedOrder['err_code_des']);
            }
        }

        if (sp_is_mobile()) {
            $wx = new Wechat();
            $jsApiParams = $wx->api->getWxPayJsApiParameters($unifiedOrder['prepay_id']);
            $this->assign('jsApiParams', $jsApiParams);
        }

        $this->assign('trade', $trade);
        $this->assign('order', $orderinfo);
        $this->assign('unifiedOrder', $unifiedOrder);
        $this->assign('orderlink',$viewhref);
        $this->display();


    }

    function recharge($id)
    {
        $model = D('Account/Recharge');
        $info = $model->getRow(array(
            'id' => $id,
            'member_id' => $_SESSION['user']['member']['id'],
        ));

        if (empty($info)) {
            $this->error('传入数据错误！');
        }

        if ($info['receipt_status'] == 1) {
            $this->success('当前充值已经付款了！', leuu('Account/Recharge/logs'));
        }

        $trade_id = $this->build_trade($id, 'RECHARGE', $info['recharge_money'], '面料馆-充值');

        if (!$trade_id) {
            $this->error('生成交易单失败！');
        }

        $trade = $this->_model->find($trade_id);

        $unifiedOrder = $this->get_unified_order($trade_id);

        if (!$unifiedOrder) {
            $this->error('生成预订单失败！');
        }

        if ($unifiedOrder['return_code'] == 'FAIL') {
            //exit($unifiedOrder['return_msg']);
            $this->error('生成预订单失败！');
        }

        if ($unifiedOrder['result_code'] == 'FAIL') {
            if ($unifiedOrder['err_code'] == 'ORDERPAID') {
                D('Account/Recharge')->receipt($trade['order_id'], 1);

                $this->success('当前充值已经付款了！', leuu('Account/Recharge/logs'));
            } else {
                //exit($unifiedOrder['err_code'] . ': ' . $unifiedOrder['err_code_des']);
                $this->error($unifiedOrder['err_code_des']);
            }
        }

        if (sp_is_mobile()) {
            $wx = new Wechat();
            $jsApiParams = $wx->api->getWxPayJsApiParameters($unifiedOrder['prepay_id']);
            $this->assign('jsApiParams', $jsApiParams);
        }

        $this->assign('trade', $trade);
        $this->assign('order', $info);
        $this->assign('unifiedOrder', $unifiedOrder);
        $this->display();
    }

    //检查更新交易单状态
    function trade_status()
    {
        if (IS_POST) {
            $trade_id = I('post.id');

            $response = $this->update_trade_status($trade_id);  //96

            switch ($response['type']) {
                case 'ORDER':
                    $this->update_order_status($response);
                    break;
                case 'RECHARGE':
                    $this->update_recharge_statue($response);
                    break;
            }
        }
    }

    function notify()
    {
        $wx = new Wechat();
        list($res, $notifyData, $replyData) = $wx->api->progressWxPayNotify();

        $data = array(
            'notify' => json_encode($notifyData, 256),
            'reply' => json_encode($replyData, 256),
        );

        //M('NotifyLog')->add($data);
//        $wx->api->send('oPF6tw8R62HaUMwO2EEPrB9hh_tI', 'test');

        if ($notifyData['return_code'] == 'SUCCESS') {
            $order_id = $replyData['attach'];
            $time_end = strtotime($replyData['time_end']);
        }

        $wx->api->replyWxPayNotify(json_encode($replyData));
        exit();
    }

    //关闭交易
    function closeorder($id)
    {
        $trade = $this->_model->getTrade($id);
        if ($trade) {
            list($error, $result, $closeorder) = $this->_model->closeTrade($trade['out_trade_no']);

            if ($error) {
                exit($error);
            }


            $data['data'] = $trade = $this->_model->getTrade($id);
            $this->ajaxReturn($data);
        } else {
            exit('非法操作！');
        }
    }

    //关闭交易
    function closetrade($id)
    {
        $this->closeorder($id);
    }

    //获取交易单
    private function build_trade($order_id, $order_type, $fee, $body = null)
    {

        if (is_null($body)) {
            $body = L('WX_TRADE_BODY');
        }

        if (sp_is_mobile() && is_weixin()) {
            $trade_type = 'JSAPI';  //手机微信浏览器
        } else {
            $trade_type = 'NATIVE'; //电脑支付
        }

        //获取未完成支付的支付单
        $trade = $this->_model->getUnpaidTrade($order_id, $trade_type, $order_type);
        //找不到就新建一个
        if (empty($trade)) {
            $result = $this->_model->createTrade(array(
                'order_id' => $order_id,
                'order_type' => $order_type,
                'out_trade_no' => $this->_model->buildOutTradeNo(),
                'body' => $body,
                'trade_type' => $trade_type,
                'total_fee' => $fee,
                'time_start' => time(),
                'time_expire' => time() + 3600 * 24 * 7,    //有效期7天
                'openid' => sp_is_mobile() && is_weixin() ? $this->user['openid'] : '',
            ));
            return $result;
        }
        return $trade['trade_id'];
    }

    //获取预订单
    private function get_unified_order($trade_id)
    {
        $trade = $this->_model->find($trade_id);

        if (!empty($trade)) {
            if ($this->user['openid'] === 'oPF6tw8R62HaUMwO2EEPrB9hh_tI' || $this->user['openid'] === 'o3EsCxML5uWaEcXcDqix3_xrygu0') {
                $trade['total_fee'] = 0.01;
            }

//            $this->user['openid'] === 'oPF6tw8R62HaUMwO2EEPrB9hh_tI';
//            $trade['total_fee'] = 0.01;

            $wx = new Wechat();
            // 生成微信预订单
            $params = array(
                'out_trade_no' => $trade['out_trade_no'],
                'body' => $trade['body'],
                'trade_type' => $trade['trade_type'],
                'total_fee' => $trade['total_fee'] * 100,
                'time_start' => date('YmdHis', $trade['time_start']),
                'time_expire' => date('YmdHis', $trade['time_expire']),
                'notify_url' => leuu('wx/notify/pay_notify', array(), false, true),
                'attach' => $trade['order_id'],
            );

            if (sp_is_mobile() && is_weixin()) {
                //JSAPI需要openid
                $openid = $this->user['openid'];
            } else {
                $openid = '';
            }
            return $wx->api->wxPayUnifiedOrder($openid, $params);
        }
        return false;
    }

    //更新交易单状态
    private function update_trade_status($trade_id)
    {
        $trade = $this->_model->getTrade($trade_id);

        if (!$trade) {
            return false;
        }

        $type = $trade['order_type'];
        $order_id = $trade['order_id'];
        $trades = $this->_model->getTradesNoPaged("order_id:$order_id;type:$type");
        $sql = $this->_model->getLastSql();

        $wx = new Wechat();

        $state = 'NOTPAY';  //支付状态
        $time_end = null;
        $querys = array();
        foreach ($trades as $trade) {
            //已支付，跳出循环
            if ($trade['trade_state'] == 'SUCCESS') {
                $state = $trade['trade_state'];
                $time_end = $trade['time_end'];
                break;
            }

            //支付已关闭，下一个
            if ($trade['trade_state'] == 'CLOSED') {
                continue;
            }

            //获取支付状态
            $query = $wx->api->wxPayOrderQuery($trade['out_trade_no']);
            $querys[] = $query;

            //更新支付状态
            if ($query['trade_state'] == 'SUCCESS') {
                $data = array(
                    'trade_id' => $trade['trade_id'],
                    'trade_state' => $query['trade_state'],
                    'time_end' => strtotime($query['time_end']),
                );
                $state = $query['trade_state'];
                if ($this->_model->updateTrade($data)) {
                    $time_end = strtotime($query['time_end']);
                    break;
                }
            } elseif ($query['trade_state'] != $trade['trade_state']) {
                $data = array(
                    'trade_id' => $trade['trade_id'],
                    'trade_state' => $query['trade_state'],
                );
                $this->_model->updateTrade($data);
            }
        }

        //如果已支付，关闭其他支付单
        if ($state == 'SUCCESS') {
            $unpaid_trades = $this->_model
                ->where(array('order_id' => $order_id, 'trade_state' => 'NOTPAY'))
                ->getField('out_trade_no', true);
            if (!empty($unpaid_trades)) {
                foreach ($unpaid_trades as $out_trade_no) {
                    $this->_model->closeTrade($out_trade_no);
                }
            }
        }

        return array(
            'trade_id' => $trade_id,
            'order_id' => $order_id,
            'type' => $type,
            'state' => $state,
            'time' => $time_end,
            //'querys'=> $querys,
            //'trades'   => $trades,
            //'sql'   =>$sql,
        );
    }

    //更新订单状态
    private function update_order_status($response)
    {
        $id = $response['order_id'];
        $state = $response['state'];
        $time_end = $response['time'];
        $order = $this->order_model->where("order_id = $id")->find();

        switch ($order['order_type']) {
            case 2:
                $viewhref = leuu('order/group/view', array('oid' => $id));
                break;
            case 3:
            case 4:
                $viewhref = leuu('Order/SupplierCard/view', array('id' => $id));
                break;
            case 5:
                $viewhref = C("NEW_DOMAIN_URL") . "agency/info/" . $order['pay_note'];
                break;
            default:
                $viewhref = leuu('order/index/view', array('id' => $id));
        }
        //早就付款了
        if ($order['pay_status'] == 2) {
            //代客找版
            if ($order['order_type'] == 5) {
                D("Api/Agency", "Service")->setApplyPayed($id);
            }

            $this->success('已支付！', $viewhref);
        }

        if ($state === 'SUCCESS') {
            $this->order_model->startTrans();
            $result = $this->order_model->setPaid($id, $time_end);
            if($result === false){
                $this->order_model->rollback();
                $this->error($this->order_model->getError());
            }

            $this->order_model->commit();
            //代客找版
            if ($order['order_type'] == 5) {
                D("Api/Agency", "Service")->setApplyPayed($id);
            }

            $this->success('已支付！', $viewhref);
        } else {
            $this->error($state);
        }
    }

    //更新充值状态
    private function update_recharge_statue($response)
    {
        $id = $response['order_id'];
        $state = $response['state'];
        $time_end = $response['time'];

        $model = D('Account/Recharge');

        $row = $model->getRow($id);

        //早就付款了
        if ($row['receipt_statue'] == 1) {
            $this->success($state, leuu('Account/Recharge/logs'));
            //跳转到支付结果
        }

        if ($state == 'SUCCESS') {
            $model->startTrans();
            $result = $model->receipt($id, 1, date('Y-m-d H:i:s', $time_end));
            if($result === false){
                $model->rollback();
                $this->error('操作失败');
            }
            $model->commit();
            $this->success($state, leuu('Account/Recharge/logs'));
        } else {
            $this->ajaxReturn(array(
                'info' => $state,
                'data' => $response,
            ));
        }
    }
}
