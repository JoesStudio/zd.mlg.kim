<?php
/**
 * Created by PhpStorm.
 * User: Vnimy
 * Date: 2016-11-04
 * Time: 10:32
 */

namespace Demand\Controller;


use Common\Controller\AdminbaseController;

class AdminDemandController extends AdminbaseController
{
    protected $_model;
    protected $demand_trash = 0;
    protected $biz_model;
    public $task_model;
    public $taskLimit;
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_model = D('Demand/Demand');
        $this->task_model = D('Demand/Task');
        $this->biz_model = D('BizMember');
        $this->taskLimit = $this->task_model->taskLimit;
        $this->assign('taskLimit', $this->taskLimit);
        $this->assign('statuses', $this->_model->statuses);
        $this->assign('task_statuses', $this->task_model->statuses);
    }

    function index(){
        $where = array();
        if($_REQUEST['filter']){
            $filter = I('request.filter');
            $statuses = array_keys(D('Demand')->statuses);
            if(isset($filter['status'])){
                if($filter['status']==-1){
                    $where['demand_status'] = array('IN',$statuses);
                }else{
                    $where['demand_status'] = $filter['status'];
                }
            }

            if(!empty($filter['keywords'])){
                $keywords = $filter['keywords'];
                $where['nickname|user_login'] = array('like', "%$keywords%");
            }

            if (!empty($filter['datestart']) && !empty($filter['datefinish'])) {
                $where['demand_created'] = array('between', strtotime($filter['datestart']).','.strtotime($filter['datefinish']));
            } elseif (!empty($filter['datestart']) && empty($filter['datefinish'])) {
                $where['demand_created'] = array('egt', strtotime($filter['datestart']));
            } elseif (empty($filter['datestart']) && !empty($filter['datefinish'])) {
                $where['demand_created'] = array('elt', strtotime($filter['datefinish']));
            }

            $this->assign('filter',$filter);
        }
        
        $where['demand_trash'] = $this->demand_trash;
        $demands = $this->_model->getDemandsPaged($where);

        $this->assign('demands', $demands);

        $this->display();
    }

    function add($id){
        $user = D('Users')->getUser($id);
        $this->assign('user',$user);
        $this->display();
    }

    

    public function add_post(){
        $uid = I('post.user_id');
        if(!$uid){
            $this->error("传入数据错误");
        }

        if(IS_POST){
            if($_FILES){
                $config = array(
                    'maxSize'    =>    3145728, 
                    'rootPath'   =>    'data/', //文件上传跟目录
                    'savePath'   =>    'upload/need-img/', //设置附件上传目录 
                    'saveName'   =>    array('uniqid',''),
                    'exts'       =>    array('jpg', 'gif', 'png', 'jpeg'), 
                    'autoSub'    =>    true,
                    'subName'    =>    array('date','Y-m-d'),
                    );

                $upload = new \Think\Upload($config);// 实例化上传类
                $info   =   $upload->upload();

                if(!$info){
                    $this->error("图片上传失败，请从新上传！");die;//输出错误提示
                }else{
                    $need_img = array();
                    foreach($info as $key => $value){
                        $need_img[] = 'need-img/'.date('Y-m-d',time()).'/'.$value['savename']; 
                    }
                    $need_img = json_encode($need_img,true);
                }
            
            }

            $_POST['user_id'] = $uid;
            $_POST['demand_img'] = $need_img;
            $_POST['demand_created'] = time();
            $_POST['demand_end_date'] = strtotime($_POST['demand_end_date']);
            $_POST['demand_expect_date'] = strtotime($_POST['demand_expect_date']);

            $_POST['demand_contact'] = json_encode($_POST['demand_contact'],true);

            $result = $this->_model->saveDemand($_POST);
            if($result !== false){
                D('Demand/Log')->logAction($result,sp_get_current_userid());
                $this->success("添加成功!",U('view',array('id'=>$result)));
            }else{
                $this->error($this->_model->getError());
            }

        }
    }

    function edit(){

        $demand = $this->_model->getDemand($_GET['id']); 
        $this->assign($demand);

        /*$this->assign('areas',D('Areas')->getAreasByDistrict($demand['area']));*/

        $this->display();
    }

    function edit_post(){
        if(IS_POST){
            $data = I('post.');
            $data['demand_contact'] = json_encode($data['contact'], 256);
            foreach($data['demand_img'] as $k=>$v){
                $data['demand_img'][$k] = sp_asset_relative_url($v);
            }
            $data['demand_img'] = json_encode($data['demand_img'], 256);
            $data['demand_end_date'] = strtotime($data['demand_end_date'] );
            $data['demand_expect_date'] = strtotime($data['demand_expect_date'] );
            $result = $this->_model->saveDemand($data);
            if($result){
                $this->success('修改成功！');
            }else{
                $this->error($this->_model->getError());
            }
        }
    }

    public function view($id)
    {
        $demand = $this->_model->getDemand($id);
        $this->assign($demand);

        if ($demand['demand_status'] > 0) {
            $tasks = $this->task_model->getTasksNoPaged("demand_id:$id;subData:supplier;");
            $this->assign('tasks', $tasks);

            if (count($tasks) < 3) {
                $allot_sids = array();
                foreach ($tasks as $task_id => $task) {
                    array_push($allot_sids, $task['supplier_id']);
                }
                $whereS['biz_status'] = 1;
                if (!empty($allot_sids)) {
                    //去掉已分配的面料商
                    $whereS['id'] = array('NOT IN', $allot_sids);
                }
                $suppliers = D('BizMember')->field('id,biz_name')->where($whereS)->select();
                $this->assign('suppliers', $suppliers);
            }
        }

        $this->display();
    }

    /*无效需求*/
    function invalid(){
         if(IS_POST){
            $id = I('post.id');
            $demand = $this->_model->where(array('demand_id'=>$id))->find();
            if($demand){
                $result = $this->_model->where(array('demand_id'=>$id))->save(array('demand_status'=>5));

                $note='无效需求';
                D('Demand/log')->logAction($id,sp_get_current_admin_id(),$note);

                if($result !== false){
                    $this->success('操作成功！',leuu('view',array('id'=>$id)));
                }else{
                    $this->error($this->_model->getError());
                }
            }else{
                $this->error('错误的操作！');
            }
        }
    }

    /*通过需求*/
    function pass(){
        if(IS_POST){
            $id = I('post.id');
            $demand = $this->_model->where(array('demand_id'=>$id))->find();
            if($demand){
                $result = $this->_model->where(array('demand_id'=>$id))->save(array('demand_status'=>1));

                $note='通过需求';
                D('Demand/log')->logAction($id,sp_get_current_admin_id(),$note);

                if($result !== false){
                    $this->success('操作成功！',leuu('view',array('id'=>$id)));
                }else{
                    $this->error($this->_model->getError());
                }
            }else{
                $this->error('错误的操作！');
            }
        }
    }

    /*删除需求*/
    function delete(){
        if(IS_POST){
            $id = I('post.id');
            $demand = $this->_model->where(array('demand_id'=>$id))->find();
            if($demand){
                $result = $this->_model->where(array('demand_id'=>$id))->save(array('operator'=>mGetOperator(),'operator_id'=>mGetOperatorId(),'demand_trash'=>1));
                if($result !== false){
                    $this->success('操作成功！',leuu('index'));
                }else{
                    $this->error($this->_model->getError());
                }
            }else{
                $this->error('错误的操作！');
            }
        }
    }

    /*分配需求给供应商*/
    function allot_post(){
        if(IS_POST){
            if(empty($_POST['supplier'])){
                $this->task_model->where(array("demand_id"=>$_POST['demand_id']))->delete();
                $this->success('该需求没有分配！',U('index'));exit();
            }
            $this->task_model->where(array("demand_id"=>$_POST['demand_id'],"supplier_id"=>array("not in",implode(",", $_POST['supplier']))))->delete();
            foreach ($_POST['supplier'] as $supplier_id){
                $find_task_num=$this->task_model->where(array("demand_id"=>$_POST['demand_id'],"supplier_id"=>$supplier_id))->count();
                if(empty($find_task_num)){
                    $this->task_model->add(array("supplier_id"=>intval($supplier_id),"demand_id"=>$_POST['demand_id'],'task_created'=>time()));

                    // 发送消息
                    $id = $supplier_id;
                    $title = '您被新分配到一则采购商的采购需求信息！';
                    $content = '您被新分配到一则采购商的采购需求信息，请确认是否能提供服务以及相关报价。';
                    D('Notify/Msg')->sendMsg($id,$title,$content);
                }
            }

            /*分配给供应商后，需求的状态改变代报价*/
            $demand = $this->_model->where(array('demand_id'=>$_POST['demand_id']))->find();
            if($demand){
                $result = $this->_model->where(array('demand_id'=>$_POST['demand_id']))->save(array('demand_status'=>2));
                if($result !== false){
                    $note='代报价';
                    D('Demand/log')->logAction($id,sp_get_current_admin_id(),$note);
                    $this->success("分配成功！已给供应商发送消息,等待供应商报价",U('view'));
                }else{
                    $this->error($this->_model->getError());
                }
            }else{
                $this->error('错误的操作！');
            }
        }
    }


}