<?php
/**
 * 会员注册
 */
namespace User\Controller;
use Common\Controller\HomebaseController;
use Common\Model\UsersModel;
use Common\Model\UserInfoModel;
class RegisterController extends HomebaseController {

    protected $_model;

    protected $default_user_type = 20;

    function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->_model = new UsersModel();
    }

    function index(){
	    if(sp_is_user_login()){ //已经登录时直接跳到首页
	        redirect(__ROOT__."/");
	    }else{
	        $this->display(":register");
	    }
	}
	
	function doregister(){
    	
    	if(isset($_POST['email'])){
    	    
    	    //邮箱注册
    	    //$this->_do_email_register();
            $this->error("注册方式不存在！");
    	    
    	}elseif(isset($_POST['mobile'])){
    	    
    	    //手机号注册
    	    //$this->_do_mobile_register();
            $this->error("注册方式不存在！");
    	    
    	}elseif(isset($_POST['wx_register'])){
            //微信注册
            $this->do_wechat_register();
        }else{
    	    $this->error("注册方式不存在！");
    	}
	}

    public function do_wechat_register(){

        if(!isset($_POST['wx_register']) || empty($_POST['openid'])){
            return array('非法操作！',null);
        }

        $openid = $_POST['openid'];
        $password = isset($_POST['password']) ? $_POST['password']:$openid;
        $username = isset($_POST['username']) ? $_POST['username']:'wxuser_'.time();
        $nicename = $_POST['nickname'];
        $sex = $_POST['sex'];
        $avatar = $_POST['avatar'];

        $data = array(
            'user_login' => $username,
            'avatar' => $avatar,
            'sex' => $sex,
            'nickname' => $nicename,
            'user_pass' => $password,
            'last_login_ip' => get_client_ip(0,true),
            'create_time' => date("Y-m-d H:i:s"),
            'last_login_time' => date("Y-m-d H:i:s"),
            'user_status' => 1,
            "user_type"=>$this->default_user_type,//会员
            "openid"=>$openid,
        );
        $this->_model->startTrans();
        $result = $this->_model->saveUser($data);

        if($result !== false){
            $info = array(
                'user_id'   => $result,
                'nickname'  => $nicename,
                'sex'       => $sex,
                'avatar'    => $avatar,
            );
            $infoModel = new UserInfoModel();
            $result = $infoModel->saveInfo($info);
        }

        if($result !== false){
            $this->_model->commit();
            return array(null, $result);
        }else{
            $this->_model->rollback();
            return array($this->_model->getError(), null);
        }
    }
	
	private function _do_mobile_register(){
	    
	    if(!sp_check_verify_code()){
	        //$this->error("验证码错误！");
	    }
	     
        $rules = array(
            //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
            array('user_login', 'require', '用户名称不能为空！', 0, 'regex', 1),
            array('mobile', 'require', '手机号不能为空！', 1 ),
            array('password','require','密码不能为空！',1),
            array('password','5,20',"密码长度至少5位，最多20位！",1,'length',3),
            array('repassword', 'require', '重复密码不能为空！', 1 ),
            array('repassword','password','确认密码不正确',0,'confirm'),
        );
	     
	    if($this->_model->validate($rules)->create()===false){
	        $this->error($this->_model->getError());
	    }
	    /*待短信接口，再开放*/
	    /*if(!sp_check_mobile_verify_code()){
	        $this->error("手机验证码错误！");
        }*/
	     
	    $password=I('post.password');
	    $mobile=I('post.mobile');
	    $user_login=I('post.user_login');
	    
	    $where['mobile']=$mobile;

	    $result = $this->_model->where($where)->count();
	    if($result){
	        $this->error("手机号已被注册！");
	    }else{

	        $data=array(
	            'user_login' => $user_login,
	            //'user_email' => '',
	            'mobile' =>$mobile,
	            'nickname' =>'',
	            'user_pass' => sp_password($password),
	            'last_login_ip' => get_client_ip(0,true),
	            'create_time' => date("Y-m-d H:i:s"),
	            'last_login_time' => date("Y-m-d H:i:s"),
	            'user_status' => 1,
	            "user_type"=>$this->default_user_type,//会员
	        );
	        $rst = $this->_model->addUser($data);
	        if($rst){
	            //注册成功页面跳转
	            $data['id']=$rst;
	            session('user',$data);

                //referer
                $session_login_http_referer=session('login_http_referer');
                $redirect=empty($session_login_http_referer)?__ROOT__."/":$session_login_http_referer;
                session('login_http_referer','');

	            $this->success("注册成功！",$redirect);
	        
	        }else{
	            $this->error("注册失败！".$this->_model->getError());
	        }
	         
	    }
	}
	
	private function _do_email_register(){
	   
        if(!sp_check_verify_code()){
            $this->error("验证码错误！");
        }
        
        $rules = array(
            //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
            array('email', 'require', '邮箱不能为空！', 1 ),
            array('password','require','密码不能为空！',1),
	    array('password','5,20',"密码长度至少5位，最多20位！",1,'length',3),
            array('repassword', 'require', '重复密码不能为空！', 1 ),
            array('repassword','password','确认密码不正确',0,'confirm'),
            array('email','email','邮箱格式不正确！',1), // 验证email字段格式是否正确
            	
        );
	     
	    if($this->_model->validate($rules)->create()===false){
	        $this->error($this->_model->getError());
	    }
	     
	    $password=I('post.password');
	    $email=I('post.email');
	    $username=str_replace(array(".","@"), "_",$email);
	    //用户名需过滤的字符的正则
	    $stripChar = '?<*.>\'"';
	    if(preg_match('/['.$stripChar.']/is', $username)==1){
	        $this->error('用户名中包含'.$stripChar.'等非法字符！');
	    }
	     
// 	    $banned_usernames=explode(",", sp_get_cmf_settings("banned_usernames"));
	     
// 	    if(in_array($username, $banned_usernames)){
// 	        $this->error("此用户名禁止使用！");
// 	    }
	    
	    $where['user_login']=$username;
	    $where['user_email']=$email;
	    $where['_logic'] = 'OR';
	    
	    $ucenter_syn=C("UCENTER_ENABLED");
	    $uc_checkemail=1;
	    $uc_checkusername=1;
	    if($ucenter_syn){
	        include UC_CLIENT_ROOT."client.php";
	        $uc_checkemail=uc_user_checkemail($email);
	        $uc_checkusername=uc_user_checkname($username);
	    }

	    $result = $this->_model->where($where)->count();
	    if($result || $uc_checkemail<0 || $uc_checkusername<0){
	        $this->error("用户名或者该邮箱已经存在！");
	    }else{
	        $uc_register=true;
	        if($ucenter_syn){
	             
	            $uc_uid=uc_user_register($username,$password,$email);
	            //exit($uc_uid);
	            if($uc_uid<0){
	                $uc_register=false;
	            }
	        }
	        if($uc_register){
	            $need_email_active=C("SP_MEMBER_EMAIL_ACTIVE");
	            $data=array(
	                'user_login' => $username,
	                'user_email' => $email,
	                'nickname' =>$username,
	                'user_pass' => sp_password($password),
	                'last_login_ip' => get_client_ip(0,true),
	                'create_time' => date("Y-m-d H:i:s"),
	                'last_login_time' => date("Y-m-d H:i:s"),
	                'user_status' => $need_email_active?2:1,
	                "user_type"=>$this->default_user_type,//会员
	            );
	            $rst = $this->_model->addUser($data);
	            if($rst){
	                //注册成功页面跳转
	                $data['id']=$rst;
	                session('user',$data);
	                	
	                //发送激活邮件
	                if($need_email_active){
	                    $this->_send_to_active();
	                    session('user',null);
	                    $this->success("注册成功，激活后才能使用！",U("user/login/index"));
	                }else {
	                    $this->success("注册成功！",__ROOT__."/");
	                }
	                	
	            }else{
	                $this->error("注册失败！".$this->_model->getError(),U("user/register/index"));
	            }
	             
	        }else{
	            $this->error("注册失败！".$this->_model->getError(),U("user/register/index"));
	        }
	         
	    }
	}
	
	function active(){
		$hash=I("get.hash","");
		if(empty($hash)){
			$this->error("激活码不存在");
		}
		
		$this->_model=M("Users");
		$find_user=$this->_model->where(array("user_activation_key"=>$hash))->find();
		
		if($find_user){
			$result=$this->_model->where(array("user_activation_key"=>$hash))->save(array("user_activation_key"=>"","user_status"=>1));
			
			if($result){
				$find_user['user_status']=1;
				session('user',$find_user);
				$this->success("用户激活成功，正在登录中...",__ROOT__."/");
			}else{
				$this->error("用户激活失败!",U("user/login/index"));
			}
		}else{
			$this->error("用户激活失败，激活码无效！",U("user/login/index"));
		}
		
		
	}
	
	
}