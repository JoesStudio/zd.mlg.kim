<?php
/**
 * 会员注册
 */
namespace User\Controller;
use Common\Controller\HomebaseController;
class LoginController extends HomebaseController {

    protected $_model;

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_model = D('Users');
    }

    function index(){
	    $redirect=I('get.redirect','');
	    if(!empty($redirect)){
	        $redirect=base64_decode($redirect);
	        $redirect ? session('login_http_referer',$redirect):'';
	    }
	    if(sp_is_user_login()){ //已经登录时直接跳到首页
            setcookie("uid", sp_get_current_userid(), time() + 3600 * 24, "/", ".mlg.kim");
            setcookie("session_mlg", session_id(), time() + 3600 * 24, "/", ".mlg.kim");
            redirect(__ROOT__."/");
	    }else{
	        $this->display(":login");
	    }
	}
	
	function active(){
		$this->check_login();
		$this->display(":active");
	}
	
	function doactive(){
		$this->check_login();
		$current_user=session('user');
		if($current_user['user_status']==2){
		    $this->_send_to_active();
		    $this->success('激活邮件发送成功，激活请重新登录！',U("user/index/logout"));
		}else if($current_user['user_status']==1){
		    $this->error('您的账号已经激活，无需再次激活！');
		}else{
		    $this->error('您的账号无法发送激活邮件！');
		}
	}
	
    /*忘记密码第一步*/
	function forgot_password(){
        
		$this->display(":find-password-step1");
	}

    function forgot_post1(){
        if(IS_POST){
            
            $rules = array(
                //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
                array('user_mobile', 'require', '手机号不能为空！', 1 ),
                
            );
                
            $users_model=M("Users");
             
            if($users_model->validate($rules)->create()===false){
                $this->error($users_model->getError());
            }

            $check_mobile=I('post.user_mobile');
            $act=I("post.act");


            $where['user_mobile']=$check_mobile;
             
            $users_model=M("Users");
            $result = $users_model->where($where)->count();
            if(!$result){
                 $this->error('该手机号未注册！');
            }else{
                $this->success('账号验证成功',leuu('User/Login/forgot_password2',array('mobile'=>$check_mobile,'act'=>$act)));
            }
     

        }
    }
    /*忘记密码第二步*/
    function forgot_password2(){

        $this->display(":find-password-step2");
    }

    function forgot_post2(){
        if(IS_POST){
            $verify = I('post.verify');
            $act = I('post.act');
            $mobile = I('post.mobile');
            if(!is_numeric($mobile) && !empty($act)){
            $this->redirect('login/forgot_password2');
            }
            
            if(empty($verify)){
                $this->error('请输入验证码');
            }else{
                list($result, $error_code, $sms_id) = D('Sms/Sms')->checkCode($mobile, $verify);
                if($result !== true){
                    $this->error('验证码错误');
                }else{
               
                    switch($act){
                        case 'setting_pass':
                            $key = md5(uniqid());
                            session('setting_pass_token',$key);
                            D('Sms/Sms')->setUsed($sms_id);
                            $this->redirect('User/Login/forgot_password3', array('key'=>$key,'mobile'=>$mobile));
                            // $this->ajaxReturn(array('status'=>1,'url'=>leuu('User/Login/forgot_password3',array('key'=>$key,'mobile'=>$mobile))));
                            break;
                        default:
                    }
                }
            }
        }
    }
    /*忘记密码第三步*/
    function forgot_password3(){
        $mobile = I('get.mobile');
        $key = I('get.key');
        if($key == session('setting_pass_token') && !empty($mobile)){
            session('change_mobile_token',null);
            $this->assign('mobile',$mobile);
            $this->display(":find-password-step3");
        }else{
            $this->redirect('User/Login/forgot_password');
        }

    }

    function fotgot_post3(){
        
        if(IS_POST){
            
            $users_model=M("Users");
            $check_mobile=I("post.mobile");   
            $password=I('post.password');
            $surePassword=I('post.surePassword');
            if($password===$surePassword){

                $where['user_mobile']=$check_mobile;

                $result = $users_model->where($where)->count();
                ;
                if($result){
                    $updata_pass=$users_model->where($where)->save(array('user_pass' => sp_password($surePassword)));
                   if($updata_pass!==false){
                        session('user',null);
                       $this->success("密码重置成功",leuu("User/Login/forgot_password4"));
                   }else{
                       $this->error("密码重置失败！");
                       $this->redirect('User/Login/forgot_password');
                   }
                }else{
                    $this->error('该手机号未注册！');
                }
            }
        }else{
             $this->error("密码重置失败！");
        }
    }

    function forgot_password4(){
    
        $this->display(":find-password-step4");
    }


	function doforgot_password(){
		if(IS_POST){
			if(!sp_check_verify_code()){
				$this->error("验证码错误！");
			}else{
				$users_model=M("Users");
				$rules = array(
						//array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
						array('email', 'require', '邮箱不能为空！', 1 ),
						array('email','email','邮箱格式不正确！',1), // 验证email字段格式是否正确
						
				);
				if($users_model->validate($rules)->create()===false){
					$this->error($users_model->getError());
				}else{
					$email=I("post.email");
					$find_user=$users_model->where(array("user_email"=>$email))->find();
					if($find_user){
						$this->_send_to_resetpass($find_user);
						$this->success("密码重置邮件发送成功！",__ROOT__."/");
					}else {
						$this->error("账号不存在！");
					}
					
				}
				
			}
			
		}
	}
	




	function do_mobile_forgot_password(){
	    if(IS_POST){
	    
    	    if(!sp_check_verify_code()){
    	        $this->error("验证码错误！");
    	    }
    	     
            $rules = array(
                //array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
                array('mobile', 'require', '手机号不能为空！', 1 ),
                array('password','require','密码不能为空！',1),
                array('password','5,20',"密码长度至少5位，最多20位！",1,'length',3),
            );
            	
    	    $users_model=M("Users");
    	     
    	    if($users_model->validate($rules)->create()===false){
    	        $this->error($users_model->getError());
    	    }
    	    
    	    if(!sp_check_mobile_verify_code()){
    	        $this->error("手机验证码错误！");
            }
    	     
    	    $password=I('post.password');
    	    $mobile=I('post.mobile');
    	     
    	    $where['mobile']=$mobile;
    	     
    	    $users_model=M("Users");
    	    $result = $users_model->where($where)->count();
    	    if($result){
    	       $result=$users_model->where($where)->save(array('user_pass' => sp_password($password)));
    	       if($result!==false){
    	           $this->success("密码重置成功！");
    	       }else{
    	           $this->error("密码重置失败！");
    	       }
    	    }else{
    	        $this->error('该手机号未注册！');
    	    }
    	}
	}
	
	protected  function _send_to_resetpass($user){
		$options=get_site_options();
		//邮件标题
		$title = $options['site_name']."密码重置";
		$uid=$user['id'];
		$username=$user['user_login'];
	
		$activekey=md5($uid.time().uniqid());
		$users_model=M("Users");
	
		$result=$users_model->where(array("id"=>$uid))->save(array("user_activation_key"=>$activekey));
		if(!$result){
			$this->error('密码重置激活码生成失败！');
		}
		//生成激活链接
		$url = U('user/login/password_reset',array("hash"=>$activekey), "", true);
		//邮件内容
		$template =<<<hello
		#username#，你好！<br>
		请点击或复制下面链接进行密码重置：<br>
		<a href="http://#link#">http://#link#</a>
hello;
		$content = str_replace(array('http://#link#','#username#'), array($url,$username),$template);
	
		$send_result=sp_send_email($user['user_email'], $title, $content);
	
		if($send_result['error']){
			$this->error('密码重置邮件发送失败！');
		}
	}
	
	
	function password_reset(){
	    $users_model=M("Users");
	    $hash=I("get.hash");
	    $find_user=$users_model->where(array("user_activation_key"=>$hash))->find();
	    if (empty($find_user)){
	        $this->error('重置码无效！',__ROOT__."/");
	    }else{
	        $this->display(":password_reset");
	    }
	}
	
	function dopassword_reset(){
		if(IS_POST){
			if(!sp_check_verify_code()){
				$this->error("验证码错误！");
			}else{
				$users_model=M("Users");
				$rules = array(
						//array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
						array('password', 'require', '密码不能为空！', 1 ),
						array('password','5,20',"密码长度至少5位，最多20位！",1,'length',3),
						array('repassword', 'require', '重复密码不能为空！', 1 ),
						array('repassword','password','确认密码不正确',0,'confirm'),
						array('hash', 'require', '重复密码激活码不能空！', 1 ),
				);
				if($users_model->validate($rules)->create()===false){
					$this->error($users_model->getError());
				}else{
					$password=sp_password(I("post.password"));
					$hash=I("post.hash");
					$result=$users_model->where(array("user_activation_key"=>$hash))->save(array("user_pass"=>$password,"user_activation_key"=>""));
					if($result){
						$this->success("密码重置成功，请登录！",U("user/login/index"));
					}else {
						$this->error("密码重置失败，重置码无效！");
					}
					
				}
				
			}
		}
	}

    function wxbind(){
        if(sp_is_user_login()){ //已经登录时直接跳到首页
            $redirect = session('login_http_referer') ? session('login_http_referer'):__ROOT__.'/';
            redirect($redirect);
        }else{
            if(sp_is_mobile() && is_weixin()){
                $data = session('wxbind_data');
                $this->assign($data);
                $this->display();
            }
        }
    }

    function wxbind_post(){
        if(IS_POST && is_weixin() && sp_is_mobile()){
            if($_POST['submit'] == 'bind'){

                $post = I('post.');
                $openid = $post['openid'];
                $username = $post['username'];
                $password = $post['password'];

                $count = $this->_model->where(array('openid'=>$openid))->count();
                if($count > 0){
                    $this->error('这个微信号已经有绑定面料馆账号了！');
                }

                $user = $this->_model->where(array('user_login'=>$username))->find();
                if(sp_compare_password($password, $user['user_pass'])){
                    if(empty($user['openid'])){
                        $result = $this->_model->where(array('id'=>$user['id']))->setField('openid',$openid);
                        if($result !== false){
                            $redirect = $this->login_session($user);
                            session('wxbind_data', null);
                            $this->success('绑定成功！',$redirect);
                        }else{
                            $this->error('绑定失败！');
                        }
                    }else{
                        $this->error('这个账号已经绑定其他微信号了，请先解绑！');
                    }
                }else{
                    $this->error('账号密码错误！');
                }
            }elseif($_REQUEST['act'] == 'register'){
                $data = session('wxbind_data');
                $_POST['wx_register'] = 1;
                $_POST['openid'] = $data['openid'];
                $_POST['username'] = 'wxuser_'.time();
                $_POST['password'] = $data['openid'];
                $_POST['nickname'] = $data['nickname'];
                $_POST['sex'] = $data['sex'];
                $_POST['avatar'] = $data['avatar'];
                list($err, $user_id) = R('User/Register/do_wechat_register');

                if($user_id){
                    $user = $this->_model->getUser($user_id);
                    if($user){
                        session('wxbind_data',null);
                        $redirect = $this->login_session($user);
                        $this->success('账号已创建！',$redirect);
                    }else{
                        $this->error('账号已创建，但加载账号失败，请重新登录！');
                    }
                }else{
                    $this->error('创建账号失败！'.$err);
                }
            }

        }
    }


    function wxdologin(){
        if(IS_POST){
            $qrcode_model = M('WxQrcode');
            $where['sceneid'] = I('post.sceneid');
            $where['ticket'] = I('post.ticket');
            $where['status'] = 0;
            $qrcode = $qrcode_model->where($where)->find();
            if($qrcode['openid']){
                $qrcode_model->where($where)->setField('status',1);
                $user = $this->_model->getUserByOpenId($qrcode['openid']);

                if($user){
                    if($user['user_status']){
                        $redirect = $this->login_session($user, false);
                        $this->success(array(1,'登陆成功！'));
                    }else{
                        $this->success(array(0,'用户已被禁用！'));
                    }
                }else{
                    //已扫码但未找到用户
                    $this->success(array(2,'未找到账号！'),leuu('User/Login/wxbind'));
                }
            }else{
                //未扫码
                $this->error('未扫码');
            }
        }
    }
	
    //登录验证
    function dologin(){

    	/*if(!sp_check_verify_code()){
    		$this->error("验证码错误！");
    	}*/
    	
    	$users_model=M("Users");
    	// $rules = array(
    	// 		//array(验证字段,验证规则,错误提示,验证条件,附加规则,验证时间)
    	// 		array('username', 'require', '手机号/邮箱/用户名不能为空！', 1 ),
    	// 		array('password','require','密码不能为空！',1),
    	
    	// );
    	// if($users_model->validate($rules)->create()===false){
    	// 	$this->error($users_model->getError());
    	// }
    	
    	$username=I('post.username');
    	
    	if(preg_match('/^\d+$/', $username)){//手机号登录
    	    $this->_do_mobile_login();
    	}else{
    	    $this->_do_email_login(); // 用户名或者邮箱登录
    	}
    	
    	
    	 
    }
	
    private function _do_mobile_login(){
        $users_model=M('Users');
        $where['user_mobile']=I('post.username');
        $password=I('post.password');
        $result = $users_model->where($where)->find();
        
        if(!empty($result)){
            if(sp_compare_password($password, $result['user_pass'])){
                $user = $this->_model->getUser($result['id']);
                $redirect = $this->login_session($user);
        
                $this->success("登录验证成功！", $redirect);
            }else{
                $this->error("密码错误！");
            }
        }else{
            $this->error("用户名不存在！");
        }
    }
    
    private function _do_email_login(){

        $username=I('post.username');
        $password=I('post.password');
        
        if(strpos($username,"@")>0){//邮箱登陆
            $where['user_email']=$username;
        }else{
            $where['user_login']=$username;
        }
        $where['user_type'] = array('BETWEEN','20,29');
        $users_model=M('Users');
        $result = $users_model->where($where)->find();
        $ucenter_syn=C("UCENTER_ENABLED");
        
        $ucenter_old_user_login=false;
         
        $ucenter_login_ok=false;
        if($ucenter_syn){
            cookie("thinkcmf_auth","");
            include UC_CLIENT_ROOT."client.php";
            list($uc_uid, $username, $password, $email)=uc_user_login($username, $password);
             
            if($uc_uid>0){
                if(!$result){
                    $data=array(
                        'user_login' => $username,
                        'user_email' => $email,
                        'user_pass' => sp_password($password),
                        'last_login_ip' => get_client_ip(0,true),
                        'create_time' => time(),
                        'last_login_time' => time(),
                        'user_status' => '1',
                        'user_type'=>20,
                    );
                    $id= $users_model->add($data);
                    $data['id']=$id;
                    $result=$data;
                }
        
            }else{
                 
                switch ($uc_uid){
                    case "-1"://用户不存在，或者被删除
                        if($result){//本应用已经有这个用户
                            if(sp_compare_password($password, $result['user_pass'])){//本应用已经有这个用户,且密码正确，同步用户
                                $uc_uid2=uc_user_register($username, $password, $result['user_email']);
                                if($uc_uid2<0){
                                    $uc_register_errors=array(
                                        "-1"=>"用户名不合法",
                                        "-2"=>"包含不允许注册的词语",
                                        "-3"=>"用户名已经存在",
                                        "-4"=>"Email格式有误",
                                        "-5"=>"Email不允许注册",
                                        "-6"=>"该Email已经被注册",
                                    );
                                    $this->error("同步用户失败--".$uc_register_errors[$uc_uid2]);
                                     
                                     
                                }
                                $uc_uid=$uc_uid2;
                            }else{
                                $this->error("密码错误！");
                            }
                        }
        
                        break;
                    case -2://密码错
                        if($result){//本应用已经有这个用户
                            if(sp_compare_password($password, $result['user_pass'])){//本应用已经有这个用户,且密码正确，同步用户
                                $uc_user_edit_status=uc_user_edit($username,"",$password,"",1);
                                if($uc_user_edit_status<=0){
                                    $this->error("登陆错误！");
                                }
                                list($uc_uid2)=uc_get_user($username);
                                $uc_uid=$uc_uid2;
                                $ucenter_old_user_login=true;
                            }else{
                                $this->error("密码错误！");
                            }
                        }else{
                            $this->error("密码错误！");
                        }
                         
                        break;
                         
                }
            }
            $ucenter_login_ok=true;
            echo uc_user_synlogin($uc_uid);
        }
        //exit();
        if(!empty($result)){
            if(sp_compare_password($password, $result['user_pass'])|| $ucenter_login_ok){
                $user = $this->_model->getUser($result['id']);
                $redirect = $this->login_session($user);
        
                if($ucenter_old_user_login){
                    //$ucenter_old_user_login_msg="老用户请在跳转后，再次登陆";
                }
        
                $this->success("登录验证成功！", $redirect);
            }else{
                $this->error("密码错误！");
            }
        }else{
            $this->error("用户名不存在！");
        }
        
        
    }

    private function login_session($user, $referer=true){
        session('user',$user);
        setcookie("uid", sp_get_current_userid(), time() + 3600 * 24, "/", ".mlg.kim");
        setcookie("session_mlg", session_id(), time() + 3600 * 24, "/", ".mlg.kim");

        //判断是不是版哥，是的话把uid写上
        if (D("AgencyUser")->where("uid = %d", sp_get_current_userid())->find()) {
            session("agency", array(
                "uid" => sp_get_current_userid()
            ));
        }

        switch_user_type();

        //写入此次登录信息
        $data = array(
            'last_login_time' => date("Y-m-d H:i:s"),
            'last_login_ip' => get_client_ip(0,true),
        );
        $this->_model->where("id=".$user["id"])->save($data);

        if($referer){
            $user_type = session('user_type');
            /*if($user_type == 21){
                $default_url = leuu('Supplier/Center/index');
            }else{
                $default_url = leuu('Customer/Center/index');
            }*/
            $default_url = leuu('User/Center/index');
            $session_login_http_referer=session('login_http_referer');
            $redirect=empty($session_login_http_referer)?$default_url:$session_login_http_referer;
            session('login_http_referer','');
        }else{
            $redirect = '';
        }

        return $redirect;
    }

    public function play(){
        
       $this->display(":play");
    }
    
}