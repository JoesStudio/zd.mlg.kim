<?php
/**
 * Created by PhpStorm.
 * User: Vnimy
 * Date: 2016-11-16
 * Time: 10:24
 */

namespace Order\Controller;


use Common\Controller\SupplierbaseController;
use Order\Service\DealTfOrderService;

class SupplierController extends SupplierbaseController
{
    protected $_model;
    protected $orderService;

    function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->_model = D('Order', 'Logic');
        $this->orderService = new DealTfOrderService();
        $this->assign('order_statuses', $this->_model->orderStatuses);
        $this->assign('pay_statuses', $this->_model->payStatuses);
        $this->assign('shipping_statuses', $this->_model->shippingStatuses);
    }

    function index(){
        if(IS_AJAX && !sp_is_mobile()){
            if(isset($_REQUEST['filter'])){
                $filter = I('request.filter');
                if(isset($filter['status'])){
                    $where['order_status'] = array('IN','0,1');
                    switch($filter['status']){
                        case 'unpaid':
                            $where['pay_status'] = array('IN','0,1');
                            $where['shipping_status'] = 0;
                            if(isset($_REQUEST['status'])) $this->assign('unpaid_active', 'active');
                            break;
                        case 'unshipped':
                            $where['pay_status'] = 2;
                            $where['shipping_status'] = array('IN', '0,3,4');
                            if(isset($_REQUEST['status'])) $this->assign('unshipped_active', 'active');
                            break;
                        case 'unreceived':
                            $where['pay_status'] = 2;
                            $where['shipping_status'] = 1;
                            if(isset($_REQUEST['status'])) $this->assign('unreceived_active', 'active');
                            break;
                        case 'received':
                            $where['pay_status'] = 2;
                            $where['shipping_status'] = 2;
                            if(isset($_REQUEST['status'])) $this->assign('received_active', 'active');
                            break;
                        case 'closed':
                            $where['order_status'] = array('IN','2,3');
                            $where['pay_status'] = 0;
                            $where['shipping_status'] = 0;
                            if(isset($_REQUEST['status'])) $this->assign('received_active', 'active');
                            break;
                        case 'refunded':
                            $where['order_status'] = 4;
                            $where['pay_status'] = 0;
                            $where['shipping_status'] = 0;
                            if(isset($_REQUEST['status'])) $this->assign('received_active', 'active');
                            break;
                        default:
                            unset($where['order_status']);
                            if(isset($_REQUEST['status'])) $this->assign('default_active', 'active');

                    }
                }
                if(!empty($filter['keywords'])){
                    $where['order_sn'] = array('LIKE','%'.$filter['keywords'].'%');
                }
                if(!empty($filter['datestart']) && !empty($filter['datefinish'])){
                    $where['add_time'] = array('between', strtotime($filter['datestart']) . ',' . strtotime($filter['datefinish']));
                }elseif(!empty($filter['datestart']) && empty($filter['datefinish'])){
                    $where['add_time'] = array('egt', strtotime($filter['datestart']));
                }elseif(empty($filter['datestart']) && !empty($filter['datefinish'])){
                    $where['add_time'] = array('elt', strtotime($filter['datefinish']));
                }
                $this->assign('filter',$filter);
            }
            //$where['supplier_id'] = $this->memberid;
            $where['_string'] = "supplier_id='{$this->memberid}' OR 
            (source_supplier_id='{$this->memberid}' AND handover=1)";
            $data['data'] = $this->orderService->getRowsNoPaged($where);
            $data['status'] = 1;
            $this->ajaxReturn($data);
        }elseif(IS_AJAX && sp_is_mobile()){
            $where['_string'] = "supplier_id='{$this->memberid}' OR 
            (source_supplier_id='{$this->memberid}' AND handover=1)";
            $data = $this->orderService->getRowsPaged($where);
            $this->assign('data', $data);
            $html = $this->fetch('more');
            $this->ajaxReturn(array(
                'html'=>$html,
                'totalPages'=>$data['totalPages'],
            ));
        }else{
            $this->display();
        }
    }

    function view(){
        $id = I('get.id/d',0);
        $order = $this->orderService->getOrder($id);
        if(empty($order)){
            $this->error('该订单无效！');
        }
        //供应商处理非代理订单
        $supplierDealSource = $order['issource'] == 1 && $order['supplier_id'] == $this->memberid;
        //代理商处理代理订单
        $distributorDealDist = $order['issource'] == 0 && $order['supplier_id'] == $this->memberid
            && $order['handover'] == 0;
        //供应商处理代理订单
        $supplierDealDist = $order['issource'] == 0 && $order['source_supplier_id'] == $this->memberid
            && $order['handover'] == 1;
        //代理商查看代理订单
        $distributorViewDist = $order['issource'] == 0 && $order['supplier_id'] == $this->memberid
            && $order['handover'] == 1;
        $this->assign('supplierDealSource', $supplierDealSource);
        $this->assign('distributorDealDist', $distributorDealDist);
        $this->assign('supplierDealDist', $supplierDealDist);
        $this->assign('distributorViewDist', $distributorViewDist);
        if(!($supplierDealSource || $supplierDealDist || $distributorDealDist || $distributorViewDist)){
            $this->error('您没有权限操作该订单！');
        }
        $this->assign($order);
        $logs = D('Log')->getLogsPaged("order_id:$id");
        $this->assign('logs', $logs);

        $allow_act = $this->_model->allow_act;
        $acts_tmp = array_intersect($allow_act['order'][$order['order_status']],
            $allow_act['pay'][$order['pay_status']],
            $allow_act['ship'][$order['shipping_status']]);
        $actions = array();
        foreach($acts_tmp as $v){
            if(isset($this->_model->operation[$v])){
                $actions[$v] = $this->_model->operation[$v];
            }
        }
        if(isset($actions['receive'])){
            unset($actions['receive']);
        }
        $this->assign('actions',$actions);

        $this->display();
    }

    function operate(){
        if(IS_POST){
            $post = I('post.');
            if(empty($post['order_id'])){
                $this->error('非法操作！');
            }

            $order_id = $post['order_id'];

            $order = $this->orderService->getOrder($order_id);
            if(empty($order)){
                $this->error('非法操作！');
            }
            //供应商处理非代理订单
            $supplierDealSource = $order['issource'] == 1 && $order['supplier_id'] == $this->memberid;
            //代理商处理代理订单
            $distributorDealDist = $order['issource'] == 0 && $order['supplier_id'] == $this->memberid
                && $order['handover'] == 0;
            //供应商处理代理订单
            $supplierDealDist = $order['issource'] == 0 && $order['source_supplier_id'] == $this->memberid
                && $order['handover'] == 1;
            $this->assign('supplierDealSource', $supplierDealSource);
            $this->assign('distributorDealDist', $distributorDealDist);
            $this->assign('supplierDealDist', $supplierDealDist);
            if(!($supplierDealSource || $supplierDealDist || $distributorDealDist)){
                $this->error('您没有权限操作该订单！');
            }

            if($distributorDealDist && isset($post['handover']) && $post['handover'] == '转给供应商'){
                $_POST['act'] = 'operate_post';
                $_POST['operation'] = 'handover';
                $this->operate_post();
            }

            if(($supplierDealSource || $distributorDealDist)
                && isset($post['confirm']) && $post['confirm'] == '确认'){
                $_POST['act'] = 'operate_post';
                $_POST['operation'] = 'confirm';
                $this->operate_post();
            }

            if(($supplierDealSource || $distributorDealDist)
                && isset($post['modify_price']) && !empty($post['modify_price'])){
                if(empty($post['action_note'])){
                     $this->error('请填写修改价格原因！');
                }else{
                    $_POST['act'] = 'operate_post';
                    $_POST['operation'] = 'modify_price';
                    $this->operate_post();
                }
            }

            if(($supplierDealSource || $distributorDealDist)
                && isset($post['pay']) && $post['pay'] == '付款'){
                if(empty($post['action_note'])){
                    $where['order_id'] = $order_id;
                    $where['pay_status'] = array('lt',2);
                    $count = $this->_model->where($where)->count();
                    if($count > 0){
                        $this->success('',leuu('operate',array('act'=>'pay','order_id'=>$order_id,
                            'action_note'=>$post['action_note'])));
                    }else{
                        $this->success('',leuu('view',array('id'=>$order_id)));
                    }
                }else{
                    $_POST['act'] = 'operate_post';
                    $_POST['operation'] = 'pay';
                    $this->operate_post();
                }
            }
            if(($supplierDealSource || $distributorDealDist)
                && isset($post['unpay']) && $post['unpay'] == '设为未付款'){
                $where['order_id'] = $order_id;
                $where['pay_status'] = 2;
                $count = $this->_model->where($where)->count();
                if($count > 0){
                    $this->success('',leuu('operate',array('act'=>'unpay','order_id'=>$order_id,
                        'action_note'=>$post['action_note'])));
                }else{
                    $this->success('',leuu('view',array('id'=>$order_id)));
                }
            }
            if(($supplierDealSource || $supplierDealDist)
                && isset($post['prepare']) && $post['prepare'] == '配货'){
                $_POST['act'] = 'operate_post';
                $_POST['operation'] = 'prepare';
                $this->operate_post();
            }
            if(($supplierDealSource || $supplierDealDist)
                && isset($post['ship']) && $post['ship'] == '生成发货单'){
                $this->success('',leuu('SupplierTfDelivery/add',array('order_id'=>$order_id,'action_note'=>$post['action_note'])));
            }
            if(($supplierDealSource || $supplierDealDist)
                && isset($post['unship']) && $post['unship'] == '未发货'){
                if(empty($post['action_note'])){
                    $this->error('请填写取消发货原因！');
                }else{
                    $_POST['act'] = 'operate_post';
                    $_POST['operation'] = 'unship';
                    $this->operate_post();
                }
            }
            if(($supplierDealSource || $supplierDealDist)
                && isset($post['to_delivery']) && $post['to_delivery'] == '去发货'){
                $this->success('',leuu('SupplierTfDelivery/view',array('order_id'=>$order_id,
                    'action_note'=>$post['action_note'])));
            }
            if(($supplierDealSource || $supplierDealDist)
                && isset($post['receive']) && $post['receive'] == '已收货'){
                if(empty($post['action_note'])){
                    $this->error('请填写手动收货的原因！');
                }else{
                    $_POST['act'] = 'operate_post';
                    $_POST['operation'] = 'receive';
                    $this->operate_post();
                }
            }
            if(($supplierDealSource || $distributorDealDist)
                && isset($post['cancel']) && $post['cancel'] == '取消'){
                if(empty($post['action_note'])){
                    $this->error('请填写取消订单原因！');
                }else{
                    $_POST['act'] = 'operate_post';
                    $_POST['operation'] = 'cancel';
                    $this->operate_post();
                }
            }
            if(($supplierDealSource || $distributorDealDist)
                && isset($post['invalid']) && $post['invalid'] == '无效'){
                $_POST['operation'] = 'invalid';
                $this->operate_post();
            }
        }else{
            $this->assign('order_id',I('get.order_id'));
            $this->assign('action_note',I('get.action_note'));
            $this->display(I('get.act'));
        }
    }

    private function operate_post(){
        if(IS_POST){
            $post = I('post.');

            $order_id = $post['order_id'];

            $data['order_id'] = $post['order_id'];

            switch($post['operation']){
                case 'handover':
                    if($post['action_note'] == ''){
                        $post['action_note'] = '转交订单';
                    }
                    $result = $this->orderService->handover($order_id);
                    break;
                case 'confirm':
                    $result = $this->_model->setConfirm($order_id);
                    break;
                case 'pay':
                    $result = $this->_model->setPaid($order_id);
                    break;
                case 'unpay':
                    $result = $this->_model->setUnpaid($order_id);
                    break;
                case 'modify_price':
                    $data['order_id'] = $order_id;
                    $data['order_amount'] = $post['modify_price'];
                    $result = $this->_model->updateOrder($data);
                    break;
                case 'prepare':
                    $result = $this->_model->setPrepare($order_id);
                    break;
                case 'unship':
                    $result = $this->_model->unship($order_id);
                    if($result !== false){
                        $delivery_model = D('Delivery');
                        $delivery_id = $delivery_model->where(array('order_id'=>$order_id))->getField('delivery_id');
                        $result = $delivery_model->unship($delivery_id);
                        if($result === false){
                            $this->_model->setError($delivery_model->getError());
                        }
                    }
                    break;
                case 'receive':
                    $result = $this->_model->setReceived($order_id);
                    break;
                case 'cancel':
                    $result = $this->_model->cancel($order_id);
                    break;
                case 'invalid':
                    $result = false;
                    break;
                default:
                    $result = false;
            }

            if($result !== false){
                $this->logAction($order_id, $post['action_note']);
                $this->success('操作成功！', leuu('view',array('id'=>$order_id)));
            }else{
                $this->error('操作失败！'.$this->_model->getError());
            }
        }
    }

    function logAction($order_id, $action_note){
        D('Log')->logAction($order_id, sp_get_current_userid(), $action_note, 0);
    }

}